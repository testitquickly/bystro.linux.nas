Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2025-08-20T14:27:19+03:00

====== Проверка диска ======

Даже самый «здоровый» HDD со временем деградирует, например, может «тихо» испортится блок на диске, и какой-то файл (или его часть, но уже неважно) станет нечитаемым — это называется bit rot. Положение спасают только регулярные бэкапы, но регулярно это можно делать только на другие HDD, которые тоже могут незаметно загибаться. 

Файловая система ext4 не спасает от bit rot, хотя и обладает обширными возможностями журналирования.

//Журнал// в ext4 — это специальный файл “''.journal''”, которым управляет драйвер ext4. Этот файл хранится на том же диске, где и сама файловая система. В него временно записываются изменения до того, как они попадут в основную часть диска.

//Журналирование// — механизм защиты файловой системы от потери данных при сбоях питания или внезапном отключении диска ВО ВРЕМЯ ЗАПИСИ ДАННЫХ. Журналирование не заменяет бэкапы, а только гарантирует, что если с hdd произойдет сбой, то файловая система не «развалится» (каталоги не исчезнут, inodes не станут «битые»), и содержимое диска можно будет восстановить. В принципе оно помогает и просто восстановить с диска уже существующие данные после, анпример, крушения ноутбука.

У журналирования есть три режима:

* ''writeback'' (data=writeback) — журналируются только метаданные, но порядок записи данных в журнал не гарантируется. Быстро, с риском получить множество «грязных» файлов при сбое.
* ''ordered'' (data=ordered, по умолчанию) — журналируются только метаданные, то есть, структура файлов, каталоги, индексы. Сначала данные пишутся на диск, потом их метаданные — в журнал. Это защищает файловую систему от «сломанных каталогов», но не защищает сами файлы от частичной записи при сбое во время записи.
* ''journal'' (data=journal) — журналируются И данные, И метаданные. При сбое всё, что было в процессе записи, можно восстановить. Минус в том, что запись происходит медленнее, потому что данные пишутся дважды — в журнал и на диск. После чего файл успокоится на диске, метаданные о нём будут урезаны до «good enough». И если произошёл сбой в этот момент, то при следующем монтировании диска ext4 видит «неприменённые транзакции» и дописывает их на диск, доводя файловую систему до целостного состояния.

Если речь идет о простом обмене файлами, то про журналирование ext4 можно не заморачиваться даже на домашнем NAS. Если же сисадмина гарантированно подвесят за задницу при недоступности каких-то файлов на рабочем сервере, где запись новых файлов может происходить каждую минуту, тогда он или настроит журналирование в ext4 в режиме ''journal'' одной командой:

''sudo tune2fs -o journal_data_writeback /dev/sdX1''

или установит файловую систему ZFS и не забудет [[Добавить RAID-массив]]

ZFS явно делали для серверов:
* можно включить RAID-Z (проверку целостности файлов через контрольные суммы и самовосстановление данных при повреждении)
* отличное управление большими пулами данных (пул — это объединение одного или нескольких HDD в общий «резервуар» пространства; для юзеров это выглядит как один сетевой диск; внутри пула можно создавать сотни файловых систем без деления диска на разделы, и у каждой будут свои настройки: квоты, сжатие, резерв)
* cнапшоты данных (snapshot — это моментальная «фотография» состояния файловой системы в конкретный момент времени; почти не занимает место сразу после создания, потому что ZFS использует Copy-on-Write: блоки данных не копируются, пока не изменятся; если какой-то файл будет удален, снапшот всё равно хранит его в исходном виде)
* клоны данных (это снапшот, который стал отдельной файловой системой; снапшоты — «моментальный бэкап», который нельзя изменить, только восстановить, а клоны — «тестовая копия», которую можно модифицировать и использовать параллельно с родителем).
* самовосстановление (Self-healing, встроенная контрольная сумма на каждый блок, при повреждении данные автоматически восстанавливаются из реплики)
* сжатие и дедупликация данных в реальном времени (дедупликация — это когда файловая система хранит одинаковые блоки данных только один раз, даже если они встречаются в разных файлах. То есть, если у тебя два одинаковых фильма, часть данных может храниться один раз, экономя место)

Минусы, конечно же, есть: 

* очень нагружает RAM и CPU, нагрузк унужно тщательно настраивать
* ZFS надо обновлять отдельно от ядра Linux. И вообще сложнее в администрировании (можно похерить всё)
* в OMV ZFS доступна только через плагин ''openmediavault-zfs''
* нельзя перевести готовые ext4-диски в ZFS без потери данных, поэтому нужны новые диски
* для обычного домашнего NAS с фильмами это избыточная тема

Если не нужны снапшоты и дедупликация, то ext4 полностью подойдёт для хранения фильмов и резервного диска с личными файлами. 

Вот что обязательно надо регулярно делать:

===== Включить жёсткое реагирование на ошибки HDD =====

При монтировании HDD можно добавить опцию errors=remount-ro (или errors=panic), чтобы при ошибках диск автоматически переходил в режим «только чтение». 

Отмонтировать диски с данными:

1. погасить все действующие shared folders (увы, да, все)
2. ''sudo umount /mnt/backup''

В /etc/fstab добавить для каждого hdd инструкцию:

'''
/dev/sdX1  /mnt/backup  ext4  defaults,errors=remount-ro  0 2
'''

Примонтировать диски обратно:

''sudo mount -o defaults,errors=remount-ro /dev/sdX1 /mnt/backup''

===== Включить принудительную проверка файловой системы раз в месяц =====

Можно добавить в cron, например 1 число каждого месяца

''sudo fsck -f /dev/sdX1''

===== Регулярно копировать «личные файлы» на внешний носитель =====

''rsync -av --delete /mnt/backup/ /media/usb/backup_copy/''
